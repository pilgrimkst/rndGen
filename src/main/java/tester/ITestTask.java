package tester;

/***
 *     ITestTask и возвращающее в ответ на вызовы метода getRandom(int userId)
 *     случайные целые числа от 0 до 999 (для генерации случайных чисел возможно
 *     использование стандартных инструментов языка Java).
 *     Основная сложность приложения заключается в том, что каждый клиент имеет квоту на
 *     количество запросов к системе, которые он имеет право сделать. В случае, у клиента
 *     израсходована вся квота, метод вместо очередного случайного числа должен
 *     выбрасывать исключение QuotaExceededException.
 *     Регистрация клиентов происходит автоматически: при вызове любого метода с
 *     неиспользованным до этого значением userId, пользователь с таким идентификатором
 *     регистрируется в системе с квотой в 10 запросов.
 */

public interface ITestTask {

  int getRandom(int userId) throws QuotaExceededException;


    /***
     * Запрос addQuota(int userId, long quota)увеличивает квоту клиента с
     *  идентификатором userIdна quota запросов. Если клиент с таким идентификатором не
     *  был зарегистрирован ранее, сначала он регистрируется с квотой 10, а затем его квота
     *  повышается на указанное значение (итого, получается quota + 10).
     * @param userId
     * @param quota
     */
    void addQuota(int userId, long quota);

    /***
     * Также должен поддерживаться метод get(int userId), выдающий остаток
     * квоты у данного клиента (должен возвращать 10 для новых клиентов).
     * @param userId
     * @return
     */
  long getQuota(int userId);

  void destroy();

    /***
      Метод clearAll()должен возвращать приложение в начальное состояние (очищать
     * базу данных, сбрасывать все квоты и кэши). Гарантируется, что после вызова данногометода не будет ни одного запроса к системе из любого потока и процесса в течение
     * ближайших трёх секунд.
     */
  void clearAll();

}
